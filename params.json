{
  "name": "Laravel-transip",
  "tagline": "Laravel TransIP is a bridge for the TransIP wrapper and Laravel 5.",
  "body": "Laravel TransIP\r\n===============\r\n[![Build Status](https://scrutinizer-ci.com/g/hiddeco/laravel-transip/badges/build.png?b=master)](https://scrutinizer-ci.com/g/hiddeco/laravel-transip/build-status/master)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/hiddeco/laravel-transip/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/hiddeco/laravel-transip/?branch=master)\r\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\r\n[![StyleCI](https://styleci.io/repos/41059403/shield)](https://styleci.io/repos/41059403)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/08fce49f-ae4c-4c8f-8667-bd297c7b708e/mini.png)](https://insight.sensiolabs.com/projects/08fce49f-ae4c-4c8f-8667-bd297c7b708e)\r\n\r\nLaravel TransIP provides a bridge between the [TransIP package](https://github.com/hiddeco/transip) and Laravel 5.*.\r\n\r\n## Installation\r\nTo use this package without running into trouble you will need PHP 5.5+ or HHVM 3.6+, and Composer.\r\n\r\n1.\tGet the latest version of Laravel TransIP, add the following line to your composer.json file\r\n\t`\"hiddeco/laravel-transip\": \"5.3\"`\r\n\r\n2.\tRun `composer update` or `composer install`\r\n\r\n3.\tRegister the Laravel TransIP service provider in `config/app.php` by adding\r\n\t`'TransIP\\Laravel\\TransIPServiceProvider::class'` to the providers key\r\n\r\n4.\tAdd the `TransIP` facade to the aliases key: `'TransIP' => TransIP\\Laravel\\Facades\\TransIP::class`\r\n\r\n## Configuration\r\nTo manage your TransIP connections run the `php artisan vendor:publish` command, this will create the `config/transip.php`\r\nfile where you can modify and manage your client connections.\r\n\r\nThe following configuration options are available:\r\n\r\n**Default Connection Name**\r\n\r\nThe TransIP connection name set here (`default`) is the default connection used for all API requests. However, you may \r\nuse as many connections as you need using the manager class. The default setting is `'main'`.\r\n\r\n**TransIP Connections**\r\n\r\nThis is the place to configure your TransIP connections (`connections`). A default configuration with possible \r\noptions (except your API credentials) is already present and there is no limit to the amount of connections.\r\n\r\nEach connection has 2 required fields (`username` and `private_key`) and 2 optional fields (`mode` and `endpoint`).\r\nIt is worth mentioning the `mode` field only accepts `readonly` and `readwrite` as values.\r\n\r\n## Usage\r\n\r\n### TransIP Manager\r\nThe `TransIPManager` is where the magic happens. Bounded to the ioc container as `transip` and accessible by using the \r\n`Facade\\TransIP` facade. It uses parts of the [Laravel Manager](https://github.com/GrahamCampbell/Laravel-Manager) \r\npackage to manage the TransIP client connections. For more information about the Manager you should check out the respective \r\n[docs](https://github.com/GrahamCampbell/Laravel-Manager#usage). \r\n\r\nIt is worth noting the connection returned will always be an instance of `\\HiddeCo\\TransIP\\Client`. You \r\ncan find more information about this instance and its methods in the [TransIP docs](https://github.com/hiddeco/transip/blob/master/doc/).\r\n\r\n### TransIP Facade\r\nThe TransIP facade will pass static method calls to the `transip` object in the ioc container, which as stated \r\nbefore is the `TransIPManager` class.\r\n\r\n### Examples\r\nThe usage of this package is fairly simple. Add your TransIP API credentials to the  `main` connection and the package \r\nwill work without any further settings.\r\n\r\n**Using the Facade**\r\n\r\n````php\r\nuse TransIP\\Laravel\\Facades\\TransIP;\r\n\r\n$domainNames = TransIP::domain()->getDomainNames();\r\n// and you're done\r\n````\r\n\r\n**Using the TransIP Manager**\r\n\r\nThe `TransIPManager` returns an instance of `\\HiddeCo\\TransIP\\Client` and will behave like it. If \r\nyou want to call a specific connection, you can use the `connection` method:\r\n\r\n````php\r\nuse TransIP\\Laravel\\Facades\\TransIP;\r\n\r\n$domainNames = TransIP::connection('alternative')->domain()->getDomainNames();\r\n````\r\n\r\nChanging the default connection and further explanations:\r\n\r\n````php\r\nuse TransIP\\Laravel\\Facades\\TransIP;\r\n\r\nTransIP::connection('main')->domain()->getDomainNames();\r\nTransIP::domain()->getDomainNames();\r\nTransIP::connection()->domain()->getDomainNames();\r\n// are all the same because \r\n\r\nTransIP::getDefaultConnection();\r\n// returns 'main' as set in the configuration file\r\n\r\nTransIP::setDefaultConnection('alternative');\r\n// the 'alternative' connection is now the default connection\r\n````\r\n\r\n**Dependency Injection**\r\n\r\nPrefer the use of a dependency injection over facades? You can easily inject the manager:\r\n\r\n````php\r\nuse TransIP\\Laravel\\TransIPManager;\r\n\r\nclass Foo\r\n{\r\n\tprotected $transIP;\r\n\t\r\n\tpublic function __construct(TransIPManager $transIP)\r\n\t{\r\n\t\t$this->transIP;\r\n\t}\r\n\t\r\n\tpublic function bar()\r\n\t{\r\n\t\t$this->transIP->domain()->getDomainNames();\r\n\t}\r\n}\r\n````\r\n\r\n## License\r\nLaravel TransIP is licensed under [The MIT License (MIT)](https://github.com/hiddeco/laravel-transip/blob/master/LICENSE).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}